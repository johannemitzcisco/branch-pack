Help on module ncs.application in ncs:

NNAAMMEE
    ncs.application - Module for building NCS applications.

FFIILLEE
    /root/nso4.4.2/src/ncs/pyapi/ncs/application.py

CCLLAASSSSEESS
    __builtin__.object
        PlanComponent
    ncs_pyvm.ncspyvm.NcsPyVM(__builtin__.object)
        Application
    threading.Thread(threading._Verbose)
        NanoService
        Service
    
    class AApppplliiccaattiioonn(ncs_pyvm.ncspyvm.NcsPyVM)
     |  Class for easy implementation of an NCS application.
     |  
     |  This class is intended to be sub-classed and used as a 'component class'
     |  inside an NCS package. It will be instantiated by NCS when the package
     |  is loaded. The setup() method should to be implemented to register
     |  service- and action callbacks. When NCS stops or an error occurs,
     |  teardown() will be called. A 'log' attribute is available for logging.
     |  
     |  Example application:
     |      from ncs.application import Application, Service, NanoService
     |      from ncs.dp import Action
     |  
     |      class FooService(Service):
     |          @Service.create
     |          def cb_create(self, tctx, root, service, proplist):
     |              # service code here
     |  
     |      class FooNanoService(NanoService):
     |          @NanoService.create
     |          def cb_nano_create(self, tctx, root, service,
     |                             component, state, proplist):
     |              # service code here
     |  
     |      class FooAction(Action):
     |          @Action.action
     |          def cb_action(self, uinfo, name, kp, input, output):
     |              # action code here
     |  
     |      class MyApp(Application):
     |          def setup(self):
     |              self.log.debug('MyApp start')
     |              self.register_service('myservice-1', FooService)
     |              self.register_service('myservice-2', FooService, 'init_arg')
     |              self.register_nano_service('nano-1', 'myserv:router',
     |                                         'myserv:ntp-initialized',
     |                                         FooNanoService)
     |              self.register_action('action-1', FooAction)
     |  
     |          def teardown(self):
     |              self.log.debug('MyApp finish')
     |  
     |  Method resolution order:
     |      Application
     |      ncs_pyvm.ncspyvm.NcsPyVM
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, *args, **kwds)
     |      Initialize an Application object.
     |      
     |      Don't try to initialize this object. I will be done by NCS.
     |  
     |  ccrreeaattee__ddaaeemmoonn(self, name=None)
     |      Name the underlying dp.Daemon object.
     |      
     |      It's not necessary to call this method. Only do that to give the
     |      daemon a custom name.
     |  
     |  rreeggiisstteerr__aaccttiioonn(self, actionpoint, action_cls, init_args=None)
     |      Register an action callback class.
     |      
     |      Call this method to register 'action_cls' as the action callback
     |      class for action point 'actionpoint'. 'action_cls' should be a
     |      subclass of dp.Action. If the optional argument 'init_args' is
     |      supplied it will be passed in to the init() method of the subclass.
     |  
     |  rreeggiisstteerr__nnaannoo__sseerrvviiccee(self, servicepoint, componenttype, state, nano_service_cls, init_args=None)
     |      Register a nano service callback class.
     |      
     |      Call this method to register 'nano_service_cls' as the nano service
     |      callback class for service point 'servicepoint'.
     |      'nano service_cls' should be a subclass of NanoService.
     |      If the optional argument 'init_args' is supplied
     |      it will be passed in to the init() method of the subclass.
     |  
     |  rreeggiisstteerr__sseerrvviiccee(self, servicepoint, service_cls, init_args=None)
     |      Register a service callback class.
     |      
     |      Call this method to register 'service_cls' as the service callback
     |      class for service point 'servicepoint'. 'service_cls' should be a
     |      subclass of Service. If the optional argument 'init_args' is supplied
     |      it will be passed in to the init() method of the subclass.
     |  
     |  rreeggiisstteerr__ttrraannss__ccbb(self, trans_cb_cls)
     |      Register a transaction callback class.
     |      
     |      If a custom transaction callback implementation is needed, call this
     |      method with the transaction callback class as the 'trans_cb_cls'
     |      argument.
     |  
     |  sseettuupp(self)
     |      Application setup method.
     |      
     |      Override this method to register actions and services. Any other
     |      initialization could also be done here.
     |  
     |  tteeaarrddoowwnn(self)
     |      Application teardown method.
     |      
     |      Override this method to clean up custom resources allocated in
     |      setup().
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ncs_pyvm.ncspyvm.NcsPyVM:
     |  
     |  aadddd__rruunnnniinngg__tthhrreeaadd(self, class_name)
     |  
     |  ccrriittiiccaall(self, line)
     |  
     |  ddeebbuugg(self, line)
     |  
     |  ddeell__rruunnnniinngg__tthhrreeaadd(self, class_name)
     |  
     |  eerrrroorr(self, line)
     |  
     |  iinnffoo(self, line)
     |  
     |  rreegg__ffiinniisshh(self, cbfun)
     |  
     |  uunnrreegg__ffiinniisshh(self, cbfun)
     |  
     |  wwaarrnniinngg(self, line)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ncs_pyvm.ncspyvm.NcsPyVM:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class NNaannooSSeerrvviiccee(threading.Thread)
     |  NanoService callback.
     |  
     |  This class makes it easy to create and register nano service callbacks by
     |  subclassing it and implementing some of the nano service callbacks.
     |  
     |  Method resolution order:
     |      NanoService
     |      threading.Thread
     |      threading._Verbose
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, daemon, servicepoint, componenttype, state, log=None, init_args=None)
     |      Initialize this object.
     |      
     |      The 'daemon' argument should be a Daemon instance. 'servicepoint'
     |      is the name of the tailf:servicepoint to manage. Argument 'log' can
     |      be any log object, and if not set the Daemon log will be used.
     |      'init_args' may be any object that will be passed into init() when
     |      this object is constructed. Lastly, the low-level function
     |      dp.register_nano_service_cb() will be called.
     |      
     |      When creating a service callback using Application.register_nano_service
     |      there is no need to manually initialize this object as it is then
     |      done automatically.
     |  
     |  iinniitt(self, init_args)
     |      Custom initialization.
     |      
     |      When registering a service using Application this method will be
     |      called with the 'init_args' passed into the register_service()
     |      function.
     |  
     |  rruunn(self)
     |      Service thread processing loop.
     |      
     |      Don't call this method explicitly. It sets up a MAAPI connection
     |      towards ConfD/NCS and, if running as a NCS application, registers
     |      itself as a running thread to make it look nice in the CLI.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ccrreeaattee(fn)
     |      Decorator for the cb_nano_create callback.
     |      
     |      Using this decorator alters the signature of the cb_create callback
     |      and passes in maagic.Node objects for root and service.
     |      The maagic.Node objects received in 'root' and 'service' are backed
     |      by a MAAPI connection with the FASTMAP handle attached. To update
     |      'proplist' simply return it from this function.
     |      
     |      Example of a decorated cb_create:
     |      
     |          @NanoService.create
     |          def cb_nano_create(self, tctx, root, service, proplist):
     |              pass
     |      
     |          Keyword arguments:
     |          tctx - transaction context (TransCtxRef)
     |          root -- root node (maagic.Node)
     |          service -- service node (maagic.Node)
     |          component -- plan component active for this invokation
     |          state -- plan component state active for this invokation
     |          proplist - properties (list(tuple(str, str)))
     |  
     |  ddeelleettee(fn)
     |      Decorator for the cb_nano_delete callback.
     |      
     |      Using this decorator alters the signature of the cb_delete callback
     |      and passes in maagic.Node objects for root and service.
     |      The maagic.Node objects received in 'root' and 'service' are backed
     |      by a MAAPI connection with the FASTMAP handle attached. To update
     |      'proplist' simply return it from this function.
     |      
     |      Example of a decorated cb_create:
     |      
     |          @NanoService.delete
     |          def cb_nano_delete(self, tctx, root, service, proplist):
     |              pass
     |      
     |          Keyword arguments:
     |          tctx - transaction context (TransCtxRef)
     |          root -- root node (maagic.Node)
     |          service -- service node (maagic.Node)
     |          component -- plan component active for this invokation
     |          state -- plan component state active for this invokation
     |          proplist - properties (list(tuple(str, str)))
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from threading.Thread:
     |  
     |  ____rreepprr____(self)
     |  
     |  ggeettNNaammee(self)
     |  
     |  iissAAlliivvee(self)
     |      Return whether the thread is alive.
     |      
     |      This method returns True just before the run() method starts until just
     |      after the run() method terminates. The module function enumerate()
     |      returns a list of all alive threads.
     |  
     |  iissDDaaeemmoonn(self)
     |  
     |  iiss__aalliivvee = isAlive(self)
     |      Return whether the thread is alive.
     |      
     |      This method returns True just before the run() method starts until just
     |      after the run() method terminates. The module function enumerate()
     |      returns a list of all alive threads.
     |  
     |  jjooiinn(self, timeout=None, balancing=True)
     |      Wait until the thread terminates.
     |      
     |      This blocks the calling thread until the thread whose join() method is
     |      called terminates -- either normally or through an unhandled exception
     |      or until the optional timeout occurs.
     |      
     |      When the timeout argument is present and not None, it should be a
     |      floating point number specifying a timeout for the operation in seconds
     |      (or fractions thereof). As join() always returns None, you must call
     |      isAlive() after join() to decide whether a timeout happened -- if the
     |      thread is still alive, the join() call timed out.
     |      
     |      When the timeout argument is not present or None, the operation will
     |      block until the thread terminates.
     |      
     |      A thread can be join()ed many times.
     |      
     |      join() raises a RuntimeError if an attempt is made to join the current
     |      thread as that would cause a deadlock. It is also an error to join() a
     |      thread before it has been started and attempts to do so raises the same
     |      exception.
     |  
     |  sseettDDaaeemmoonn(self, daemonic)
     |  
     |  sseettNNaammee(self, name)
     |  
     |  ssttaarrtt(self)
     |      Start the thread's activity.
     |      
     |      It must be called at most once per thread object. It arranges for the
     |      object's run() method to be invoked in a separate thread of control.
     |      
     |      This method will raise a RuntimeError if called more than once on the
     |      same thread object.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from threading.Thread:
     |  
     |  ddaaeemmoonn
     |      A boolean value indicating whether this thread is a daemon thread (True) or not (False).
     |      
     |      This must be set before start() is called, otherwise RuntimeError is
     |      raised. Its initial value is inherited from the creating thread; the
     |      main thread is not a daemon thread and therefore all threads created in
     |      the main thread default to daemon = False.
     |      
     |      The entire Python program exits when no alive non-daemon threads are
     |      left.
     |  
     |  iiddeenntt
     |      Thread identifier of this thread or None if it has not been started.
     |      
     |      This is a nonzero integer. See the thread.get_ident() function. Thread
     |      identifiers may be recycled when a thread exits and another thread is
     |      created. The identifier is available even after the thread has exited.
     |  
     |  nnaammee
     |      A string used for identification purposes only.
     |      
     |      It has no semantics. Multiple threads may be given the same name. The
     |      initial name is set by the constructor.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from threading._Verbose:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class PPllaannCCoommppoonneenntt(__builtin__.object)
     |  Service plan component.
     |  
     |  The usage of this class is in conjunction with a service that
     |  uses a reactive FASTMAP pattern.
     |  With a plan the service states can be tracked and controlled.
     |  
     |  A service plan can consist of many PlanComponent's.
     |  This is operational data that is stored together with the service
     |  configuration.
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, service, name, component_type)
     |      Initialize a PlanComponent.
     |  
     |  aappppeenndd__ssttaattee(self, state_name)
     |      Append a new state to this plan component.
     |      
     |      The state status will be initialized to 'ncs:not-reached'.
     |  
     |  sseett__ffaaiilleedd(self, state_name)
     |      Set state status to 'ncs:failed'.
     |  
     |  sseett__rreeaacchheedd(self, state_name)
     |      Set state status to 'ncs:reached'.
     |  
     |  sseett__ssttaattuuss(self, state_name, status)
     |      Set state status.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class SSeerrvviiccee(threading.Thread)
     |  Service callback.
     |  
     |  This class makes it easy to create and register service callbacks by
     |  subclassing it and implementing some of the service callbacks.
     |  
     |  Method resolution order:
     |      Service
     |      threading.Thread
     |      threading._Verbose
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, daemon, servicepoint, log=None, init_args=None)
     |      Initialize this object.
     |      
     |      The 'daemon' argument should be a Daemon instance. 'servicepoint'
     |      is the name of the tailf:servicepoint to manage. Argument 'log' can
     |      be any log object, and if not set the Daemon log will be used.
     |      'init_args' may be any object that will be passed into init() when
     |      this object is constructed. Lastly, the low-level function
     |      dp.register_service_cb() will be called.
     |      
     |      When creating a service callback using Application.register_service
     |      there is no need to manually initialize this object as it is then
     |      done automatically.
     |  
     |  iinniitt(self, init_args)
     |      Custom initialization.
     |      
     |      When registering a service using Application this method will be
     |      called with the 'init_args' passed into the register_service()
     |      function.
     |  
     |  rruunn(self)
     |      Service thread processing loop.
     |      
     |      Don't call this method explicitly. It sets up a MAAPI connection
     |      towards ConfD/NCS and, if running as a NCS application, registers
     |      itself as a running thread to make it look nice in the CLI.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ccrreeaattee(fn)
     |      Decorator for the cb_create callback.
     |      
     |      Using this decorator alters the signature of the cb_create callback
     |      and passes in maagic.Node objects for root and service.
     |      The maagic.Node objects received in 'root' and 'service' are backed
     |      by a MAAPI connection with the FASTMAP handle attached. To update
     |      'proplist' simply return it from this function.
     |      
     |      Example of a decorated cb_create:
     |      
     |          @Service.create
     |          def cb_create(self, tctx, root, service, proplist):
     |              pass
     |      
     |          Keyword arguments:
     |          tctx - transaction context (TransCtxRef)
     |          root -- root node (maagic.Node)
     |          service -- service node (maagic.Node)
     |          proplist - properties (list(tuple(str, str)))
     |  
     |  ppoosstt__mmooddiiffiiccaattiioonn(fn)
     |      Decorator for the cb_post_modification callback.
     |      
     |      For details see Service.pre_modification decorator.
     |  
     |  pprree__lloocckk__ccrreeaattee(fn)
     |      Decorator for the cb_pre_lock_create callback.
     |      
     |      For details see Service.create decorator.
     |  
     |  pprree__mmooddiiffiiccaattiioonn(fn)
     |      Decorator for the cb_pre_modification callback.
     |      
     |      Using this decorator alters the signature of the cb_pre_modification.
     |      callback and passes in a maagic.Node object for root.
     |      This method is invoked outside FASTMAP. To update 'proplist' simply
     |      return it from this function.
     |      
     |      Example of a decorated cb_pre_modification:
     |      
     |          @Service.pre_modification
     |          def cb_pre_modification(self, tctx, op, kp, root, proplist):
     |              pass
     |      
     |          Keyword arguments:
     |          tctx - transaction context (TransCtxRef)
     |          op -- operation (int)
     |          kp -- keypath (HKeypathRef)
     |          root -- root node (maagic.Node)
     |          proplist - properties (list(tuple(str, str)))
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from threading.Thread:
     |  
     |  ____rreepprr____(self)
     |  
     |  ggeettNNaammee(self)
     |  
     |  iissAAlliivvee(self)
     |      Return whether the thread is alive.
     |      
     |      This method returns True just before the run() method starts until just
     |      after the run() method terminates. The module function enumerate()
     |      returns a list of all alive threads.
     |  
     |  iissDDaaeemmoonn(self)
     |  
     |  iiss__aalliivvee = isAlive(self)
     |      Return whether the thread is alive.
     |      
     |      This method returns True just before the run() method starts until just
     |      after the run() method terminates. The module function enumerate()
     |      returns a list of all alive threads.
     |  
     |  jjooiinn(self, timeout=None, balancing=True)
     |      Wait until the thread terminates.
     |      
     |      This blocks the calling thread until the thread whose join() method is
     |      called terminates -- either normally or through an unhandled exception
     |      or until the optional timeout occurs.
     |      
     |      When the timeout argument is present and not None, it should be a
     |      floating point number specifying a timeout for the operation in seconds
     |      (or fractions thereof). As join() always returns None, you must call
     |      isAlive() after join() to decide whether a timeout happened -- if the
     |      thread is still alive, the join() call timed out.
     |      
     |      When the timeout argument is not present or None, the operation will
     |      block until the thread terminates.
     |      
     |      A thread can be join()ed many times.
     |      
     |      join() raises a RuntimeError if an attempt is made to join the current
     |      thread as that would cause a deadlock. It is also an error to join() a
     |      thread before it has been started and attempts to do so raises the same
     |      exception.
     |  
     |  sseettDDaaeemmoonn(self, daemonic)
     |  
     |  sseettNNaammee(self, name)
     |  
     |  ssttaarrtt(self)
     |      Start the thread's activity.
     |      
     |      It must be called at most once per thread object. It arranges for the
     |      object's run() method to be invoked in a separate thread of control.
     |      
     |      This method will raise a RuntimeError if called more than once on the
     |      same thread object.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from threading.Thread:
     |  
     |  ddaaeemmoonn
     |      A boolean value indicating whether this thread is a daemon thread (True) or not (False).
     |      
     |      This must be set before start() is called, otherwise RuntimeError is
     |      raised. Its initial value is inherited from the creating thread; the
     |      main thread is not a daemon thread and therefore all threads created in
     |      the main thread default to daemon = False.
     |      
     |      The entire Python program exits when no alive non-daemon threads are
     |      left.
     |  
     |  iiddeenntt
     |      Thread identifier of this thread or None if it has not been started.
     |      
     |      This is a nonzero integer. See the thread.get_ident() function. Thread
     |      identifiers may be recycled when a thread exits and another thread is
     |      created. The identifier is available even after the thread has exited.
     |  
     |  nnaammee
     |      A string used for identification purposes only.
     |      
     |      It has no semantics. Multiple threads may be given the same name. The
     |      initial name is set by the constructor.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from threading._Verbose:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)

